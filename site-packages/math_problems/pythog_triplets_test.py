def find_pythagorean_triples(arr):
    triples = []
    n = len(arr)
    for i in range(0, n - 2):
        if not arr[i]:
            continue

        for j in range(i + 1, n - 1):
            if not arr[j]:
                continue

            for k in range(j + 1, n):
                if not arr[k]:
                    continue

                triplet_list = sorted(
                    [
                        arr[i] * arr[i],
                        arr[j] * arr[j],
                        arr[k] * arr[k],
                    ]
                )

                if triplet_list[0] + triplet_list[1] == triplet_list[2]:
                    triples.append([arr[i], arr[j], arr[k]])

    return triples


import unittest
from parameterized import parameterized


class TestPytTriplets(unittest.TestCase):

    test_params = [
        ([4, 16, 1, 2, 3, 5, 6, 8, 25, 10], [[4, 3, 5], [6, 8, 10]]),
        ([3, -1, 2, 5, 4], [[3, 5, 4]]),
    ]

    @parameterized.expand(test_params)
    def test_pyt_trip(self, input, output):
        self.assertEquals(find_pythagorean_triples(input), output)
