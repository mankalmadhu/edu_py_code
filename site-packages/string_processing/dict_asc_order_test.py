def verify_alien_dictionary(words, order):

    if len(words) < 2:
        return True

    for i in range(len(words) - 1):
        cur_word = words[i]
        next_word = words[i + 1]

        for j in range(max(len(cur_word), len(next_word))):
            if j < len(cur_word) and j < len(next_word):
                if order.index(cur_word[j]) > order.index(next_word[j]):
                    return False
                elif order.index(cur_word[j]) < order.index(next_word[j]):
                    break

            if j >= len(next_word):
                return False

    return True


import unittest
from parameterized import parameterized


class TestDictOrder(unittest.TestCase):

    test_params = [
        (["app", "apple", "alpha"], "abcdehlp", False),
        (["educated", "educate"], "educatbfghijklmnopqrsvwxyz", False),
        (["marvel", "marvellous"], "marvelbcdfghijknopqstuwxyz", True),
        (["martian"], "mabcdefghijklnopqrstuvwxyz", True),
        (["passengers", "to", "the", "unknown"], "ptuhabcdefghijklmnoqrsvwxyz", False),
        (["jupyter", "ascending"], "jabcdefghiklmnopqrstuvwxyz", True),
        (
            [
                "mzosr",
                "mqov",
                "xxsvq",
                "xazv",
                "xazau",
                "xaqu",
                "suvzu",
                "suvxq",
                "suam",
                "suax",
                "rom",
                "rwx",
                "rwv",
            ],
            "usmzoqxwvra",
            False,
        ),
    ]

    @parameterized.expand(test_params)
    def test_dict_order(self, words, order, result):
        self.assertEquals(verify_alien_dictionary(words, list(order)), result)
